import re
from pathlib import Path

# This should be converted to a Jekyll plugin, but then we first have to deploy the site in another way to
# github pages, because github pages does not support custom plugins.
# For now just run this script locally to generate (part of) the navigation file.

BASE_DIR = '.'
NAV_FILE = BASE_DIR + '/_data/navigation.yml'

MARKER = "# generated by navgen.py"


def main():
    generate_nav('python-mandelbrot', '_tutorials/python-mandelbrot-nl.md')


def generate_nav(name, markdown_file, max_level=2):
    url = markdown_file[1:-3]  # remove _ prefix and .md suffix from markdown_file

    pattern = f'^(#+)\\s(.*)'

    in_code_block = False
    nodes = [{'children': []}]
    with open(f"{BASE_DIR}/{markdown_file}", 'r') as f:
        markdown = f.read()
        for line in markdown.splitlines():
            if line.startswith('```'):
                in_code_block = not in_code_block

            if not in_code_block:
                match = re.match(pattern, line)
                if match:
                    level = len(match.group(1))
                    if level <= max_level:
                        # print(line)
                        obj = {
                            'title': match.group(2),
                            'url': f'/{url}/#{slug(match.group(2))}',
                            'children': []
                        }
                        while len(nodes) < level:
                            nodes.append({'title': '<MISSING>', 'children': []})
                            nodes[level - 2]['children'].append(nodes[level - 1])
                        nodes = nodes[:level] + [obj]
                        nodes[-2]['children'].append(obj)

    # print(nodes)
    replace_nav(name, nodes[0]['children'])


def slug(title):
    slug = title.lower().replace(' ', '-')
    slug = re.sub(r'[^a-z0-9\-]', '', slug)
    return slug


def replace_nav(name, nav):
    with open(NAV_FILE, 'r') as f:
        content = f.read()

    content = content.split("\n\n" + MARKER)[0]
    content += f"\n\n{MARKER}\n"
    content += f"{name}:\n"
    content += nav_to_string(nav, 1)

    with open(NAV_FILE, 'w') as f:
        f.write(content)


def nav_to_string(nav, level):
    content = ''
    for item in nav:
        indent = '  ' * level
        content += f"{indent}- title: \"{item['title']}\"\n"
        if 'url' in item:
            content += f"{indent}  url: \"{item['url']}\"\n"
        if 'children' in item and len(item['children']) > 0:
            content += f"{indent}  children:\n"
            content += nav_to_string(item['children'], level + 1)
    return content


if __name__ == '__main__':
    main()
